import requests
import json
from collections import defaultdict
from config import BOT_TOKEN


def get_bot_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getMe"
    response = requests.get(url)
    if response.status_code == 200:
        bot_info = response.json()
        print(f"ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:")
        print(f"   –ò–º—è: {bot_info['result']['first_name']}")
        print(f"   Username: @{bot_info['result']['username']}")
        print(f"   ID: {bot_info['result']['id']}")
        print()
        return bot_info['result']
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {response.text}")
        return None

def get_all_chat_ids():
    """–ü–æ–ª—É—á–∞–µ—Ç ID –≤—Å–µ—Ö —á–∞—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –±–æ–ª—å—à–∏–º –ª–∏–º–∏—Ç–æ–º
    params = {
        'limit': 100,
        'timeout': 0
    }
    
    response = requests.get(url, params=params)
    
    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.text}")
        return []
    
    updates = response.json()
    
    if not updates.get('ok'):
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {updates.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        return []
    
    chats = defaultdict(dict)
    
    for update in updates['result']:
        chat = None
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        if 'message' in update:
            chat = update['message']['chat']
        elif 'edited_message' in update:
            chat = update['edited_message']['chat']
        elif 'channel_post' in update:
            chat = update['channel_post']['chat']
        elif 'edited_channel_post' in update:
            chat = update['edited_channel_post']['chat']
        elif 'callback_query' in update:
            chat = update['callback_query']['message']['chat']
        elif 'inline_query' in update:
            # –î–ª—è inline_query –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ chat_id, –Ω–æ –µ—Å—Ç—å from_user
            user = update['inline_query']['from']
            chat = {
                'id': user['id'],
                'type': 'private',
                'first_name': user.get('first_name', ''),
                'last_name': user.get('last_name', ''),
                'username': user.get('username', '')
            }
        
        if chat:
            chat_id = chat['id']
            if chat_id not in chats:
                chats[chat_id] = {
                    'id': chat_id,
                    'type': chat['type'],
                    'title': chat.get('title', ''),
                    'first_name': chat.get('first_name', ''),
                    'last_name': chat.get('last_name', ''),
                    'username': chat.get('username', ''),
                    'last_activity': update.get('date', 0)
                }
    
    return list(chats.values())

def get_webhook_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook, –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo"
    response = requests.get(url)
    if response.status_code == 200:
        webhook_info = response.json()
        if webhook_info['result']['url']:
            print(f"üîó Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {webhook_info['result']['url']}")
            return webhook_info['result']
        else:
            print("üîó Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return None
    return None

def main():
    print("üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç...")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    bot_info = get_bot_info()
    if not bot_info:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
    webhook_info = get_webhook_info()
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã
    chats = get_all_chat_ids()
    
    if not chats:
        print("üì≠ –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ –∏–ª–∏ –Ω–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –ë–æ—Ç –µ—â–µ –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç")
        print("   - –ë–æ—Ç –Ω–µ –ø–æ–ª—É—á–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
        print("   - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã")
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ")
        print("   2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º")
        print("   3. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤: {len(chats)}")
    print("=" * 60)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á–∞—Ç—ã –ø–æ —Ç–∏–ø—É
    private_chats = [chat for chat in chats if chat['type'] == 'private']
    group_chats = [chat for chat in chats if chat['type'] == 'group']
    supergroup_chats = [chat for chat in chats if chat['type'] == 'supergroup']
    channel_chats = [chat for chat in chats if chat['type'] == 'channel']
    
    # –í—ã–≤–æ–¥–∏–º –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã
    if private_chats:
        print(f"\nüë§ –õ–∏—á–Ω—ã–µ —á–∞—Ç—ã ({len(private_chats)}):")
        for chat in private_chats:
            name = f"{chat['first_name']} {chat['last_name']}".strip()
            username = f"@{chat['username']}" if chat['username'] else "–±–µ–∑ username"
            print(f"   ID: {chat['id']} | {name} | {username}")
    
    # –í—ã–≤–æ–¥–∏–º –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã
    if group_chats:
        print(f"\nüë• –ì—Ä—É–ø–ø—ã ({len(group_chats)}):")
        for chat in group_chats:
            title = chat['title'] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            print(f"   ID: {chat['id']} | {title}")
    
    # –í—ã–≤–æ–¥–∏–º —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
    if supergroup_chats:
        print(f"\nüöÄ –°—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã ({len(supergroup_chats)}):")
        for chat in supergroup_chats:
            title = chat['title'] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            username = f"@{chat['username']}" if chat['username'] else "–±–µ–∑ username"
            print(f"   ID: {chat['id']} | {title} | {username}")
    
    # –í—ã–≤–æ–¥–∏–º –∫–∞–Ω–∞–ª—ã
    if channel_chats:
        print(f"\nüì¢ –ö–∞–Ω–∞–ª—ã ({len(channel_chats)}):")
        for chat in channel_chats:
            title = chat['title'] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            username = f"@{chat['username']}" if chat['username'] else "–±–µ–∑ username"
            print(f"   ID: {chat['id']} | {title} | {username}")
    
    print("\n" + "=" * 60)
    print("üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ID:")
    print("   - –î–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID")
    print("   - –î–ª—è –≥—Ä—É–ø–ø/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID (—Å –º–∏–Ω—É—Å–æ–º)")
    print("   - –î–ª—è –∫–∞–Ω–∞–ª–æ–≤: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID (—Å –º–∏–Ω—É—Å–æ–º)")
    print("   - –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤: –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @username")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    with open('chat_ids.json', 'w', encoding='utf-8') as f:
        json.dump({
            'bot_info': bot_info,
            'chats': chats,
            'summary': {
                'total': len(chats),
                'private': len(private_chats),
                'groups': len(group_chats),
                'supergroups': len(supergroup_chats),
                'channels': len(channel_chats)
            }
        }, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª 'chat_ids.json'")

if __name__ == "__main__":
    main() 